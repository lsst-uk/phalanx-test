apiVersion: apps/v1
kind: Deployment
metadata:
  name: "gafaelfawr-operator"
  labels:
    {{- include "gafaelfawr.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "gafaelfawr.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: "operator"
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.operator.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "gafaelfawr.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: "operator"
        gafaelfawr-redis-client: "true"
    spec:
      serviceAccountName: "gafaelfawr-operator"
      containers:
        - name: "gafaelfawr"
          command:
            {{- if .Values.config.ldap.kerberosConfig }}
            - "k5start"
            - "-aqUFf"
            - "/etc/krb5.keytab"
            - "--"
            {{- end }}
            - "kopf"
            - "run"
            - "--liveness=http://0.0.0.0:8080/health"
            - "-A"
            - "--log-format=json"
            - "-m"
            - "gafaelfawr.operator"
          env:
            {{- include "gafaelfawr.envVars" (dict "Release" .Release "Values" .Values "secretName" "gafaelfawr-secret") | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: "/health"
              port: "http"
            initialDelaySeconds: 300
            periodSeconds: 300
            timeoutSeconds: 120
          ports:
            - containerPort: 8080
              name: "http"
              protocol: "TCP"
          {{- with .Values.operator.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "all"
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: "config"
              mountPath: "/etc/gafaelfawr"
              readOnly: true
            {{- if .Values.config.ldap.kerberosConfig }}
            - name: "keytab"
              mountPath: "/etc/krb5.keytab"
              readOnly: true
              subPath: "ldap-keytab"
            - name: "kerberos-config"
              mountPath: "/etc/krb5.conf"
              readOnly: true
              subPath: "krb5.conf"
            - name: "tmp"
              mountPath: "/tmp"
            {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: "config"
          configMap:
            name: "gafaelfawr-config"
        {{- if .Values.config.ldap.kerberosConfig }}
        - name: "keytab"
          secret:
            secretName: "gafaelfawr-keytab"
        - name: "kerberos-config"
          configMap:
            name: "gafaelfawr-config-kerberos"
        - name: "tmp"
          emptyDir: {}
        {{- end }}
      {{- with .Values.operator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
